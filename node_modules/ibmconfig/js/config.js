/*
*  IBM Confidential OCO Source Materials
*  
*  Copyright IBM Corp.  2013, 2014
*  
*  The source code for this program is not published or otherwise
*  divested of its trade secrets, irrespective of what has
*  been deposited with the U.S. Copyright Office.
*/

var fs = require("fs");
var cp = require("child_process");

/**
 * MBaas service names
 */
var PUSH_SERVICE_NAME = "Push";
var MAM_SERVICE_NAME = "MAS";
var MOBILE_DATA_NAME = "MobileData";

/**
 * Environment variable names
 */
var VCAP_SERVICES_NAME = "VCAP_SERVICES";
var VCAP_APPLICATION_NAME = "VCAP_APPLICATION";
var VCAP_APP_PORT_NAME = "VCAP_APP_PORT";

var envLog = null;
var VCAP_APPLICATION_ENVLOG = null;
var VCAP_SERVICES_ENVLOG = null;
var VCAP_APP_PORT_ENVLOG = null;
var vcapApplication = {};
var vcapServices = {};
var appGUID = null;
var child = null;
var mbaasConfig = {
		initializeSDK: initialize
};
module.exports = mbaasConfig;

/**
 * Keep checking if evn.log is returned from the child process. The checking will stop either env.log is found or 
 * specified timeout is elapsed.
 * 
 * @param {string} applicationId the specified applicationId.
 * @param {string} environment the give environment
 */
function initialize(applicationId, environment) {
	if (!applicationId) {
		throw new Error("applicationId can not be empty, please provide the applicationId via require('ibmconfig')(applicationId)");
	}
	appGUID = applicationId;
	
	if (environment) {
		envLog = environment;
	}	
	
	if (process.env.VCAP_APPLICATION && process.env.VCAP_SERVICES) {
		// This is the case that the module runs on Bluemix
		
		vcapApplication = JSON.parse(process.env.VCAP_APPLICATION);
		vcapServices = JSON.parse(process.env.VCAP_SERVICES);
		exportConfiguration();
	} else {
		// This is the case that the module runs on developer's local environment
		
		// delete env.log if it exists
		if (fs.existsSync("env.log")) {
			fs.unlinkSync("env.log");
		}
		
		// if environment is not provided, try to fetch the env.log file from Bluemix
		if (!envLog) {			
			// Due to the node issue https://github.com/joyent/node/issues/5318, code below
			// disables the child process debug mode by removing the process.execArgv
			var oldExecArgv =  process.execArgv;
			process.execArgv = Array();		
			child = cp.fork(__dirname + "/lib/loadEnvLog");
			process.execArgv = oldExecArgv;
			
			// request to download logs/env.log
			child.send(appGUID);
			// check env.log file download completion with 60s timeout
			checkEnvLogFile(60);
			// kill the child process
			if (child) {
				child.kill(signal="SIGTERM");			
			}			
			if (fs.existsSync("env.log")) {
				// read content from env.log
				envLog = fs.readFileSync("env.log", "utf8");
			}
		}		
		
		if (envLog) {			
			VCAP_SERVICES_ENVLOG = getValueFromEnvLog(VCAP_SERVICES_NAME);
			if (VCAP_SERVICES_ENVLOG) {		
				vcapServices = 	JSON.parse(VCAP_SERVICES_ENVLOG); 
			}		
			VCAP_APPLICATION_ENVLOG = getValueFromEnvLog(VCAP_APPLICATION_NAME);
			if (VCAP_APPLICATION_ENVLOG) {			
				vcapApplication = JSON.parse(VCAP_APPLICATION_ENVLOG);
			}
			VCAP_APP_PORT_ENVLOG = getValueFromEnvLog(VCAP_APP_PORT_NAME);
		}
		// export variables from this module
		exportConfiguration();	
	}	
	return mbaasConfig;
};

/**
 * Keep checking if evn.log is returned from the child process. The checking will stop either env.log is found or 
 * specified timeout is elapsed.
 * 
 * @param {int} timeout The timeout value in second.
 */
function checkEnvLogFile(timeout) 
{   
  var startTime = new Date().getTime();
  var endTime = new Date().getTime() + (timeout * 1000);
  while (new Date().getTime() <= endTime) {
    if (fs.existsSync("env.log")) {
        break;
    }
  }
}

/**
 * Export various variables from this module.
 */
function exportConfiguration() {

	mbaasConfig.applicationId = appGUID;
	
	mbaasConfig.port = process.env.VCAP_APP_PORT || VCAP_APP_PORT_ENVLOG ||3000;
	
	mbaasConfig.mbaasContextRoot = getMbaasContextRoot();
	
	mbaasConfig.hostname = getHostname();
	
	mbaasConfig.vcapApplication = vcapApplication;
	
	mbaasConfig.vcapServices = vcapServices;
	
	console.log("ibmconfig export ======> " + JSON.stringify(mbaasConfig));
}

/**
 * Return value of the specified key in env.log.
 * 
 * @param {string} key The key name
 */
function getValueFromEnvLog(key) {	
	var value = null;	
	if (envLog) {
		var leftStr = envLog;
		var curLine = null;
		while(leftStr) {
			if (leftStr.indexOf("\n") != -1) {
				curLine = leftStr.substr(0, leftStr.indexOf("\n")); 
				leftStr = leftStr.substr(leftStr.indexOf("\n") + 1);
			} else {
				curLine = leftStr;
				leftStr = null;
			}
	    	if (curLine.indexOf("=") != -1) {
	    		curKey =  curLine.substr(0, curLine.indexOf("="));
	    		curValue = curLine.substr(curLine.indexOf("=")+1);
	    		if (curKey == key) {
	    			value = curValue;
	    			break;	    			
	    		}
	    	}
	    }
	}
	return value;    
}

/**
 * Return the host name, which is extracted from VCAP_APPLICATION.
 */
function getHostname() {
	if (vcapApplication.uris && vcapApplication.uris[0]){
		return vcapApplication.uris[0].split('.')[0];
	}
	return 'mbaas';	
}

/**
 * Return the applicationId.
 */
function getAppGUID() {
	return appGUID ? appGUID : 'applicationId';
}

/**
 * Return the MBaasContextRoot.
 */
function getMbaasContextRoot() {
	return '/' + getHostname() + '/v1/apps/' + getAppGUID();
}