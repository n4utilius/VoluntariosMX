/*
*  IBM Confidential OCO Source Materials
*  
*  Copyright IBM Corp.  2013, 2014
*  
*  The source code for this program is not published or otherwise
*  divested of its trade secrets, irrespective of what has
*  been deposited with the U.S. Copyright Office.
*/

var debug = {};
var fs = require("fs");
var yaml = require("yaml-js");
var appGUID = null;

/**
 * This child process will receive the applicationId from parent process, and then try to 
 * get the env.log file of specified application from Bluemix.
 */
process.on("message", function(id) {
	appGUID = id;
	// applictionId is a must-have parameter from parent process.
	if (!appGUID) {
		throw new Error("applicationId can not be empty to request the env.log file.");
	}
	
	// debug.json is used to specify user's Cloud Foundry token
	if (fs.existsSync("debug.json")) {
		debug = JSON.parse(fs.readFileSync("debug.json"));
		var target = debug.target;
		if (!target) {
			// the default value for target if it is not set in debug.json file
			target = "https://api.ng.bluemix.net";
		}
		if(debug.cloudFoundryTokensFilePath) { 
			var request = require("request");
			var envLogRequestURL = target + "/v2/apps/" + appGUID + "/instances/0/files/logs/env.log";
			if (!fs.existsSync(debug.cloudFoundryTokensFilePath)) {
				reportWarn("cloudFoundry tokens file does not exist: " + debug.cloudFoundryTokensFilePath + ", so the default values will be used in ibmconfig.");
				return;
			}
			var token = null;
			// For cf-cli v5, the token is in tokens.yml file, and cf-cli v6, the token is in config.json file.
			if (debug.cloudFoundryTokensFilePath.substr(-10) == 'tokens.yml') {
				var tokens = yaml.load(fs.readFileSync(debug.cloudFoundryTokensFilePath));
				if (!tokens) {
					reportWarn("cloudFoundry tokens file is empty: " + debug.cloudFoundryTokensFilePath + ", so the default values will be used in ibmconfig.");
					return;
				}
				var targetTokens = tokens[target];
				if (!targetTokens) {
					reportWarn("Can not find token for " + target + " in file: " + debug.cloudFoundryTokensFilePath + ", so the default values will be used in ibmconfig.");
					return;
				}
				token = targetTokens[":token"];
			} else if (debug.cloudFoundryTokensFilePath.substr(-11) == 'config.json') {
				var config = JSON.parse(fs.readFileSync(debug.cloudFoundryTokensFilePath));
				if (config.Target == target && config.AccessToken) {
					token = config.AccessToken;
				} else {
					reportWarn("Can not find token for " + target + " in file: " + debug.cloudFoundryTokensFilePath + ", so the default values will be used in ibmconfig.");
					return;
				}
			} else {
				reportWarn("cloudFoundry tokens file does not supported: " + debug.cloudFoundryTokensFilePath + ", so the default values will be used in ibmconfig.");
				return;
			}
			
			var options = {
			    url: envLogRequestURL,
			    headers: {
		        	"Authorization": token
			    }
			};
			function callback(error, response, body) {
			    if (!error && response.statusCode == 200) {			    	
			    	fs.writeFileSync("env.log", body, "utf8");
			    } else {			    	
			    	console.warn("Failed to get logs\env.log file from Cloud, and the detail information is added into the env.log in your project. The default values will be used in ibmconfig.");
			    	fs.writeFileSync("env.log", body, "utf8");
			    }
			}
			console.log("request for env.log at URL: " + envLogRequestURL);
			request(options, callback);
		} else {
			reportWarn("Attributes cloudFoundryTokensFilePath is missing in debug.json, so the default values will be used in ibmconfig.");
		}
	} else {
		reportWarn("can not find debug.json file, so the default values will be used in ibmconfig.");
	}  
});

/**
 * This is a util method, which will show the warn message on console, meanwhile the warn message will be written
 * into the env.log file for log purpose.
 * 
 * @param {string} message The warn message
 */
function reportWarn(message) 
{   
	console.warn(message);
	fs.writeFileSync("env.log", message, "utf8");
}


